2017/10/27 19:05:53

索引碎片整理
	db.values.reIndex()
查询分析器开启
	db.setProfilingLevel(2)
强制使用指定索引
	hing({indexname:1})
通配符
	$**	匹配任意字段中包含的字符串
-- 解析字符串>>>删除分词>>>匹配词干
-- 关键字使用双引号包含,必须匹配含有双引号的短语
	db.books.find({$text:{$search:'"books"'}})	匹配含有books的短语
排除单词
	db.books.find({$text:{$search:'mongodb -second'}}) 搜索匹配mongodb但不包含second的短语
排除文档
	db.books.find({$text:{$search:'mongodb -"second"  '}}) 搜索匹配mongodb但不包含second的文档
分配权重(默认为1,其他值为被发现的概率的倍数,即对索引的影响)
	db.books.createIndex(
		{'$**': 'text'},<--使用字符串索引索引所有字段
		{weights:
			{title: 10,	<---为字段指定1以外的权重
			dategories:5}
		}
	)
在索引里指定语言
db.books.createIndex(
	{'$**':'text'},
	{weights:
		{title:10,
		categories:5},
	name:'index_name',
	default_language:'french'
	}
)

切换存储引擎到WiredTiger
设置配置文件YAML
storage:
	dbpath:"/data/db"	数据库存储路径
	joural:
		enabled:true	是否启用日志,默认true
	engine:"wiredTiger"	存储引擎,默认mmapv1
	wiredTiger:			
		engineConfig:	
			cacheSizeGB:8	使用内存大小,默认是物理内存的一半,至少1G
			journalCompressor:none	日志压缩器,默认snappy, 设置为none获取最佳性能
		collectionConfig:
			blockCompressor:none	集合数据压缩器(none,snappy,zlib)
		indexConfig:
			prefixCompression:false	是否为索引使用压缩



collection.aggregate(pipeline)

pipline=[{$match:?},
		 {$group:?},
		 {$sort:?},
		 {$limit:?},
		 {$skip:?},
		 {$unwind:?},
		 {$redact:?},
		 {$sample:?},
		 {$out:?}

]

# $match：选择24号发布的商品且交易时长为三天的商品

# $group:打组。实际上是求和、平均等计算性的打组

# 按照price进行分组，每相同price的加1，即求每种价格出现的次数

# $sort：对'counts'进行排序，-1代表从高到低排序，1代表顺序

# $limit：和find中limit一样+

# $price相当于把原始数据中price勾过来

pipeline = [

{'$match':{'$and':[{'pub_date':'2016.12.24'},{'time':3}]}},

{'$group':{'_id':'$price','counts':{'$sum':1}}},

{'$sort' :{'counts':-1}},
