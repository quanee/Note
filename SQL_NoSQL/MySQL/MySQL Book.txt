SHOW DATABASES;

CREATE DATABASE db_name;

USE db_name;

SHOW TABLES;

CREATE TABLE t_name(FD_1 TYPE, ...);

SELECT * FROM t_name;

INSERT INTO t_name(FD_1, ...) VALUES(KEY1, ...);


表操作
选择数据库
USE db_name;
创建表
CRETAE TABLE t_name(column type,...);
查看表结构
DESC t_name;
修改表名称
ALTER TABLES old_t_name RENAME TO new_t_name;
显示所有数据库
SHOW DATABASES;
显示所有表
SHOW TABLES;
修改数据库默认编码
ALTER DATABASE db_name DEFAULT CHARACTER SET encoding;
给表添加列
ALTER TABLE t_name ADD new_column type,…;
给表删除列
ALTER TABLE t_name DROP columnname;


插入数据
插入所有字段
INSERT INTO t_name VALUES(colum1, .....);
插入部分字段
INSERT t_name(colum1,..) VALUES(value1,...);
修改数据
UPDATE tableblename SET columnname=value WHERE 条件;
删除全表
DELETE FROM t_name;
可以带条件删除
只能删除表的数据,不能删除表的约束
可以回滚
TRUNCATE TABLE t_name;
不能带条件删除
既可以删除表的数据,也可以删除表的约束
不可以回滚
####################################################################
查询所有列
SELECT * FROM t_name;
    查询指定列
SELECT column1,… FROM t_name;
    查询时指定别名
SELECT column AS ‘column_new’,… FROM t_name AS t_name_new;
    查询时添加常量列
SELECT column1,…’常量列’ FROM t_name;
    查询时合并列
SELECT columname, (column1+column2) FROM t_name;
column1和column2必须为数值类型
    查询时去除重复列
SELECT DISTINCT column FROM t_name;
SELECT DISTINCT(column) FROM t_name;
    条件查询(WHERE)
   逻辑条件:and(与) or(或)
SELECT * FROM t_name WHERE column1=value AND column2=value 
SELECT * FROM t_name WHERE column1=value OR column2=value
   比较条件: > < >= <= <>(不等于) between and
SELECT * FROM t_name WHERE column > value1 AND column < valu2;
SELECT * FROM t_name WHERE column BETWEEN value1 AND value2;
   判空条件(null 空字符串) is null, is not null, =’’, <>’’
SELECT column,… FROM t_name WHERE column is null;
   模糊条件(LIKE)
% 任意个字符
_ 一个字符
SELECT * FROM t_name WHERE column LIKE “”
    聚合查询
   常用聚合函数
SUM() 求和
AVG() 求平均值
MAX() 最大值
MIN() 最小值
COUNT() 计数
    COUNT(*) 列数
    COUNT(column) 行数
    分页查询(LIMIT 起始行, 查询几行)
起始行从0开始
分页: 当前页 每页显示条数
分页查询当前页的数据sql:SELECT * FROM t_name LIMIT (当前页-1)*每页显示条数,每页显示条数;
SELECT * FROM t_name LIMIT start_line, count_line;
    查询排序
SELECT * FROM t_name ORDER BY column ASC/DESC;
多列排序条件
SELECT * FROM t_name ORDER BY column1 ASC/DESC, column2 ASC/DESC;
先按column1排序,对column1值相同的行,按column2排序
    分组查询(GROUP BY)
SELECT column,COUNT(column/*) FROM t_name GROUP BY column;
    分组查询后筛选
SELECT column,COUNT(column/*) FROM t_name GROUP BY column HAVING COUNT(column/*);


表约束
唯一:
unique:不可可重复,可以为空,一张表可以有多个
主键: 非空+unique
primary key:不可重复,不可为空,一张表只能有一个
自增长
cretate TABLE t_name(column type auto_inrement);
cretate TABLE t_name(column type zerofill auto_inrement); 零填充
不能影响自增长约束
DELETE FROM t_name;
可以影响自增长约束
TRUNCATE TABLE t_name;
外键约束
CREATE TABLE t_name(
column type,
CONSTRAINT column_fk FOREIGN KEY(column) REFERENCES t_name_fk(column)
                         外键名称                              外键                    参考表(参考字段)                                                                      
);
有外键约束时:
添加数据时:先添加主表(参考表),再添加副表
修改数据时:先修改副表,再修改主表(参考表)数据
删除数据时:先删除副表,再删除主表(参考表)数据
级联操作
有外键约束时,通过修改或删除主表,影响副表
CREATE TABLE t_name(
column type,
CONSTRAINT column_fk FOREIGN KEY(column) REFERENCES t_name_fk(column) 
      外键名称                         外键                     参考表(参考字段)             ON UPDATE CASCADE[ ON DELETE CASCADE]                                                                   
);
级联修改:ON UPDATE CASCADE
级联删除:ON DELETE CASCADE


数据库设计
需求分析

需求设计
概要设计
抽取实体:业务模型->实体模型(类)
数据库设计:业务模型/实体模型->数据模型()硬盘
详细设计
类详细,属性,方法
三大范式
设计原则:设计的表尽量遵守三大范式
第一范式:表中每个字段必须是不可分割的独立单元
第二范式:在第一范式的基础上,非主属性完全函数依赖于任何一个候选码
第三范式:在第二范式的基础上,非主属性既不传递依赖于码,也不函数依赖于码
存储过程
执行效率快,在服务端执行
移植性差
创建存储过程
DELIMITER $     声明结束符
CREATE PROCEDURE proname()
BEGIN
SELECT * FROM t_name;
...
END $
执行存储过程
CALL proname();
参数
IN  输入参数,可以携带数据到存储过程中
OUT     输出参数,可以从存储过程中返回结果
INOUT   输入输出参数,既有输入功能,也有输出功能
带有存储输入参数的存储过程
DELIMITER $
CREATE PROCEDURE proin(IN col  type)
BEGIN
SELECT * FROM t_name WHERE column=col;
END $

CALL proin(col);

带有输出参数的存储过程
DELIMITER $
CREATE PROCEDURE proout(OUT col type)
BEGIN
 SET col = 'Hello MySQL!';
END $
删除存储过程
DROP PROCEDURE proout;


mysql变量
全局变量(内置变量) 
SHOW varibales; 查看所有全局变量
select @@变量名;查看某个全局变量
set 变量名=新值; 修改全局变量
character_set_client:mysql服务器的接收数据的编码
character_set_results:mysql服务器输出数据的编码
会话变量:只存在于当前客户端与数据库服务端的依次连接中,如果连接断开,那么会话变量全部丢失
SET @var='value';
局部变量:在存储过程中使用的变量
1)定义一个会话变量name
2)使用name会话变量接受存储过程的返回值
CALL proout(@name);
SELECT @name;
带有输入输出参数的存储过程
DELIMITER $
CREATE PROCEDURE proinout(INOUT var type)
BEGIN
SELECT var;
SET var = value;
END $

SET @var=value;
CALL proinout(@var)


带有条件判断的存储过程
输入整数,返回对应星期天
 DELIMITER $
CREATE PROCEDURE proif(IN num INT, OUT str VARCHAR(20))
BEGIN
IF num=1 THEN
SET str='星期一';
IF num=2 THEN
SET str='星期二';
IF num=3 THEN
SET str='星期三';
ELSE
SET str='输入错误';
END IF;
END $

CALL proif(1,@str);

SELECT @str;


带有循环功能的存储过程
输入数值,求从一到该数值的累加和
DELIMITER $
CREATE PROCEDURE prowhile(IN num INT, OUT result INT)
BEGIN
定义一个局部变量
DECLARE i INT DEFAULT 1;
DECLARE vsum INT DEFAULT 0;
WHILE i<=num DO
SET vsum=vsum+i;
SET i=i+1;
END WHILE;
SET result=vsum;
END $

CALL prowhile(122, @result)

SELECT @result;